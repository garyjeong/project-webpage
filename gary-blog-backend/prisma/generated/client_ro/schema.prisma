generator client {
  provider = "prisma-client-js"
  output   = "./generated/client_ro"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        String    @id @unique @default(uuid()) @db.VarChar(100)
  useremail String    @unique @db.VarChar(100)
  username  String    @db.VarChar(30)
  password  String?   @db.VarChar(100)
  createAt  DateTime  @default(now()) @db.DateTime(0)
  updateAt  DateTime  @updatedAt
  deleteAt  DateTime?
  comments  comment[]
  posts     post[]
  sns_id    user_sns?
}

model user_sns {
  seq      Int      @id @default(autoincrement())
  user_id  String   @unique
  sns_id   String   @unique @db.VarChar(20)
  sns_type PROVIDER
  user     user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model post {
  post_id   String    @id @unique @default(uuid()) @db.VarChar(100)
  title     String    @db.VarChar(500)
  thumbnail String    @db.Text
  content   String    @db.VarChar(2000)
  createAt  DateTime  @default(now()) @db.DateTime(0)
  updateAt  DateTime  @updatedAt
  deleteAt  DateTime?
  author_id String
  author    user      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  comments  comment[]

  @@index([author_id], map: "post_author_id_fkey")
}

model comment {
  comment_id String    @id @unique @default(uuid()) @db.VarChar(100)
  comment    String    @db.VarChar(500)
  createAt   DateTime  @default(now()) @db.DateTime(0)
  updateAt   DateTime  @updatedAt
  deleteAt   DateTime?
  author_id  String
  post_id    String
  author     user      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  post       post      @relation(fields: [post_id], references: [post_id], onDelete: Cascade)

  @@index([author_id], map: "comment_author_id_fkey")
  @@index([post_id], map: "comment_post_id_fkey")
}

enum PROVIDER {
  KAKAO
  NAVER
  GOOGLE
}
